<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assistente de IA Médica</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-gray-50 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Assistente de IA Médica</h1>
            <p class="text-md text-gray-600 mt-2">Análise de dados e imagens com os modelos MedGemma</p>
        </header>

        <main class="bg-white p-6 md:p-8 rounded-xl shadow-md">
            <form id="ia-form">
                <div class="space-y-6">
                    <div>
                        <label for="modelo-select" class="block text-sm font-medium text-gray-700 mb-1">1. Selecione o Modelo</label>
                        <select id="modelo-select" name="modelo" class="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="4b">MedGemma 4B (Rápido e Eficiente)</option>
                            <option value="27b">MedGemma 27B (Análise Profunda)</option>
                        </select>
                    </div>

                    <div>
                        <label for="prompt-input" class="block text-sm font-medium text-gray-700 mb-1">2. Insira o Prompt</label>
                        <textarea id="prompt-input" name="prompt" rows="8" class="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" placeholder="Ex: Com base na imagem e nos dados clínicos, qual é o diagnóstico diferencial e o plano de tratamento sugerido?"></textarea>
                    </div>

                    <div>
                        <label for="file-upload" class="block text-sm font-medium text-gray-700 mb-1">3. Carregue um Ficheiro (Imagem)</label>
                        <input id="file-upload" name="imagem" type="file" accept="image/png, image/jpeg" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                    </div>
                </div>

                <div class="mt-8 text-right">
                    <button type="submit" id="submit-button" class="inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Executar Análise
                    </button>
                </div>
            </form>
        </main>

        <section id="results-section" class="mt-8 bg-white p-6 md:p-8 rounded-xl shadow-md hidden">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Resultado da Análise</h2>
            <div id="loader" class="loader mx-auto my-4 hidden"></div>
            <div id="error-message" class="text-red-600 bg-red-50 p-4 rounded-md hidden"></div>
            <div id="resultado-div" class="text-gray-700 leading-relaxed whitespace-pre-wrap bg-gray-50 p-4 rounded-md"></div>
        </section>

    </div>

    <script>
        const form = document.getElementById('ia-form');
        const submitButton = document.getElementById('submit-button');
        const resultsSection = document.getElementById('results-section');
        const loader = document.getElementById('loader');
        const errorMessage = document.getElementById('error-message');
        const resultadoDiv = document.getElementById('resultado-div');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const prompt = document.getElementById('prompt-input').value;
            const fileInput = document.getElementById('file-upload');
            const modelo = document.getElementById('modelo-select').value;
            const file = fileInput.files[0];

            if (!prompt || !file) {
                alert('Por favor, preencha o prompt e carregue um ficheiro.');
                return;
            }

            // Mostrar secção de resultados e o loader
            resultsSection.classList.remove('hidden');
            loader.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            resultadoDiv.innerHTML = '';
            submitButton.disabled = true;
            submitButton.textContent = 'A processar...';

            try {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = async () => {
                    // Extrai apenas a parte base64 dos dados
                    const base64Image = reader.result.split(',')[1];
                    
                    // A Netlify Function estará disponível em /.netlify/functions/analise_ia
                    const response = await fetch('/.netlify/functions/analise_ia', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            model_key: modelo,
                            prompt: prompt,
                            image_base64: base64Image
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Ocorreu um erro no servidor.');
                    }

                    const data = await response.json();
                    
                    // O conteúdo gerado pelo modelo está geralmente dentro de uma estrutura
                    const generatedText = data[0]?.generated_text || 'Não foi possível extrair o texto gerado da resposta.';
                    resultadoDiv.textContent = generatedText;
                };

                reader.onerror = (error) => {
                    throw new Error('Falha ao ler o ficheiro.');
                };

            } catch (error) {
                errorMessage.textContent = `Erro: ${error.message}`;
                errorMessage.classList.remove('hidden');
            } finally {
                loader.classList.add('hidden');
                submitButton.disabled = false;
                submitButton.textContent = 'Executar Análise';
            }
        });
    </script>
</body>
</html>

